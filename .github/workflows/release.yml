name: Build Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '18.x'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm install
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
        
    - name: Build backend
      run: |
        cd backend
        npm run build
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Create release package
      run: |
        # Create release directory
        mkdir -p release
        mkdir -p release/frontend
        mkdir -p release/backend
        mkdir -p release/backend/database
        
        # Copy backend build
        cp -r backend/dist/* release/backend/
        cp backend/package.json release/backend/
        
        # Copy frontend build
        cp -r frontend/dist/* release/frontend/
        
        # Copy database files
        cp -r backend/database/* release/backend/database/ 2>/dev/null || true
        
        # Copy documentation
        cp README.md release/
        cp prd.md release/
        cp todo.md release/
        cp -r docs release/ 2>/dev/null || true
        
        # Create simple startup script
        cat > release/start.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Starting Azoth Path..."
        cd backend
        npm install --production
        node dist/index.js
        EOF
        chmod +x release/start.sh
        
    - name: Create release archive
      run: |
        # Create flat archive structure (no nested directories)
        tar -czf azoth-path-release.tar.gz -C release .
        cd release && zip -r ../azoth-path-release.zip . -x "*.git*"
        
    - name: Upload tar.gz artifact
      uses: actions/upload-artifact@v4
      with:
        name: azoth-path-release-tar
        path: azoth-path-release.tar.gz
        retention-days: 30
        
    - name: Upload zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: azoth-path-release-zip
        path: azoth-path-release.zip
        retention-days: 30
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          azoth-path-release.tar.gz
          azoth-path-release.zip
        body: |
          # Azoth Path Release
          
          ## 安装说明
          
          1. 下载对应的压缩包
          2. 解压到目标目录
          3. 运行 `./start.sh` 启动服务
          
          ## 访问地址
          
          - 前端: http://localhost:19198
          - API: http://localhost:19198/api
          - 健康检查: http://localhost:19198/api/health
          
          ## 系统要求
          
          - Node.js 18+
          - npm 8+
          - 端口 19198 可用
        draft: false
        prerelease: false

    - name: Diagnostic - Network Connectivity
      if: startsWith(github.ref, 'refs/tags/')
      continue-on-error: true
      run: |
        echo "======== 网络诊断信息 ========"
        echo ""
        echo "1️⃣ DNS 解析测试："
        nslookup ${{ secrets.SSH_HOST }} || echo "DNS 解析失败"
        
        echo ""
        echo "2️⃣ 网络连通性测试："
        ping -c 2 ${{ secrets.SSH_HOST }} || echo "Ping 失败（可能被限制）"
        
        echo ""
        echo "3️⃣ SSH 端口连通性测试："
        timeout 5 bash -c "</dev/tcp/${{ secrets.SSH_HOST }}/${{ secrets.SSH_PORT || '22' }}" && echo "✅ 端口 ${{ secrets.SSH_PORT || '22' }} 可访问" || echo "❌ 端口 ${{ secrets.SSH_PORT || '22' }} 无法访问（请检查防火墙）"
        
        echo ""
        echo "4️⃣ SSH 密钥格式检查："
        if echo "${{ secrets.SSH_PRIVATE_KEY }}" | grep -q "BEGIN.*PRIVATE KEY"; then
          echo "✅ SSH 密钥格式正确"
        else
          echo "❌ SSH 密钥格式错误"
        fi
        
        echo ""
        echo "======== 诊断完成 ========"

    - name: Deploy to SSH Server
      if: startsWith(github.ref, 'refs/tags/')
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        source: "azoth-path-release.tar.gz"
        target: ${{ secrets.SSH_TARGET_PATH }}
        rm: false
        # 增加超时时间以处理网络波动
        command_timeout: 60m
        
    - name: SSH Commands - Extract and Restart
      if: startsWith(github.ref, 'refs/tags/')
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        # 增加超时时间
        command_timeout: 60m
        script_stop: false  # 不要在非零退出码时停止，让脚本自己处理错误
        script: |
          echo "🚀 开始部署..."
          
          # 1. 停止旧进程（使用更简单的方法）
          kill $(pidof node)
          sleep 1
          
          # 2. 进入部署目录
          cd ${{ secrets.SSH_TARGET_PATH }} || { echo "❌ 目录不存在: ${{ secrets.SSH_TARGET_PATH }}"; exit 1; }
          
          # 3. 清理旧文件
          echo "🧹 清理旧文件..."
          rm -rf AzothPath/frontend/ 2>/dev/null || true
          rm -rf AzothPath/backend/dist/ 2>/dev/null || true
          mkdir -p AzothPath  # 确保目录存在
          
          # 4. 解压新版本到临时目录
          echo "📦 解压新版本..."
          if [ -f "azoth-path-release.tar.gz" ]; then
            mkdir -p azoth-path-temp
            tar -xzf azoth-path-release.tar.gz -C azoth-path-temp
          else
            echo "❌ 压缩包不存在"
            exit 1
          fi
          
          # 5. 移动文件到正确位置
          echo "📂 移动文件..."
          # 前端：frontend/ → AzothPath/frontend/
          if [ -d "azoth-path-temp/frontend" ]; then
            mv azoth-path-temp/frontend AzothPath/frontend
            echo "  ✅ 前端文件已部署"
          fi
          
          # 后端：backend/ → AzothPath/backend/dist/
          if [ -d "azoth-path-temp/backend" ]; then
            mkdir -p AzothPath/backend/dist
            # backend/ 目录里的内容已经是编译后的 dist 内容
            mv azoth-path-temp/backend/* AzothPath/backend/dist/
            echo "  ✅ 后端文件已部署"
          fi
          
          # 启动脚本
          if [ -f "azoth-path-temp/start.sh" ]; then
            mv azoth-path-temp/start.sh AzothPath/start.sh
            chmod +x AzothPath/start.sh
          fi
          
          # package.json 应该在 backend/dist/ 里
          if [ -f "AzothPath/backend/package.json" ]; then
            cp AzothPath/backend/package.json AzothPath/backend/package.json
          fi
          
          # 6. 清理临时文件
          echo "🧹 清理临时文件..."
          rm -rf azoth-path-temp
          rm -f azoth-path-release.tar.gz azoth-path-release.zip

          # 7. 启动服务
          echo "🚀 启动服务..."
          cd ${{ secrets.SSH_TARGET_PATH }}/AzothPath
          
          # 尝试使用 start.sh，如果不存在则直接运行
          if [ -f "./start.sh" ]; then
            chmod +x ./start.sh
            nohup ./start.sh > logs/app.log 2>&1 &
          else
            echo "❌ 启动脚本 start.sh 不存在"
            exit 1
          fi
          
          echo "⏳ 等待服务启动..."
          sleep 5
          
          # 9. 验证服务是否启动
          if curl -s http://localhost:19198/api/health > /dev/null 2>&1; then
            echo "✅ 服务启动成功！"
          else
            echo "⚠️ 健康检查未通过，查看日志："
            tail -n 20 ${{ secrets.SSH_TARGET_PATH }}/AzothPath/logs/app.log || echo "无法读取日志"
          fi